index:
  settings:
    analysis:
      analyzer:
        default:  # Indexing analyzer: doesn't use custom synonyms
          type: custom
          tokenizer: standard
          filter: [standard, lowercase, stop, stemmer_override, stemmer_english]
        query_default:
          type: custom
          tokenizer: standard
          filter: [standard, lowercase, synonym, stop, stemmer_override, stemmer_english]
        shingled_query_analyzer:
          type: custom
          tokenizer: standard
          filter: [standard, lowercase, stop, stemmer_override, stemmer_english, filter_shingle]
        exact_match:
          type: custom
          tokenizer: keyword
          filter: [trim, lowercase]
        best_bet_stemmed_match:
          type: custom
          tokenizer: standard
          filter: [standard, lowercase, stemmer_override, stemmer_english]
      filter:
        stemmer_english:
          type: stemmer
          name: english
        filter_shingle:
          type: shingle
          max_shingle_size: 2
          min_shingle_size: 2
mappings:

  page-traffic: &page-traffic
    page-traffic:
      _all: { enabled: false }
      dynamic_templates: [
        {
          "view_count": {
            match: "vc_*",
            mapping: { type: long, stored: true }
          }
        },
        {
          "view_fraction": {
            match: "vf_*",
            mapping: { type: float, stored: true }
          }
        },
        {
          "rank": {
            match: "rank_*",
            mapping: { type: float, stored: true }
          }
        }
      ]
      properties:
        path_components: { type: string, index: not_analyzed }
        rank_14: { type: float, stored: true }

  page-traffic-test: *page-traffic

  default:
    # See config/schema/default/doctypes/*.json
  metasearch: &metasearch
    best_bet:
      _all: { enabled: false }
      properties:
        exact_query:   { type: string, index: analyzed, analyzer: "exact_match" }
        stemmed_query: { type: string, index: analyzed, analyzer: "best_bet_stemmed_match" }
        stemmed_query_as_term: { type: string, index: not_analyzed }
        details:       { type: string, index: not_analyzed }
  metasearch-test: *metasearch
  government:
    edition:
      _all: { enabled: true }
      properties:
        id:          { type: long, index: not_analyzed, include_in_all: false }
        acronym:     { type: string, index: analyzed }
        attachments:
          properties:
            content: {type: string, index: analyzed}
            title: {type: string, index: analyzed}
            isbn: {type: string, index: not_analyzed}
            unique_reference: {type: string, index: not_analyzed}
            command_paper_number: {type: string, index: not_analyzed}
            hoc_paper_number: {type: string, index: not_analyzed}
        latest_change_note: { type: string, index: not_analyzed, include_in_all: false }
        description: { type: string, index: analyzed }
        display_type: { type: string, index: not_analyzed, include_in_all: false }
        document_collections: { type: string, index: not_analyzed, include_in_all: false }
        document_series: { type: string, index: not_analyzed, include_in_all: false }
        release_timestamp: { type: date, index: not_analyzed, include_in_all: false }
        format:      { type: string, index: not_analyzed, include_in_all: false }
        indexable_content: { type: string, index: analyzed }
        link:        { type: string, index: not_analyzed, include_in_all: false }

        # Note: the "metadata" property is intended for the storage of additional
        # non-searchable document properties. This allows additional information
        # to be stored and displayed in search results without having to make
        # changes to the schema.
        metadata: { type: object, index: no }

        operational_field: { type: string, index: not_analyzed, include_in_all: false }
        organisations: { type: string, index: not_analyzed, include_in_all: false }
        organisation_state: { type: string, index: not_analyzed, include_in_all: false }
        people: { type: string, index: not_analyzed, include_in_all: false }
        popularity: { type: float, stored: true }
        public_timestamp: { type: date, index: not_analyzed, include_in_all: false }
        relevant_to_local_government: { type: boolean, index: not_analyzed, include_in_all: false }
        search_format_types: { type: string, index: not_analyzed, include_in_all: false }
        section:     { type: string, index: not_analyzed, include_in_all: false }
        specialist_sectors: { type: string, index: not_analyzed, include_in_all: false }
        slug:        { type: string, index: not_analyzed, include_in_all: false }
        statistics_announcement_state: { type: string, index: not_analyzed, include_in_all: false }
        subsection:  { type: string, index: not_analyzed, include_in_all: false }
        subsubsection:  { type: string, index: not_analyzed, include_in_all: false }
        mainstream_browse_pages: { type: string, index: not_analyzed, include_in_all: false }
        tags: { type: string, index: not_analyzed, include_in_all: false }
        title:       { type: string, index: analyzed }
        topics: { type: string, index: not_analyzed, include_in_all: false }
        world_locations: { type: string, index: not_analyzed, include_in_all: false }
        has_official_document: { type: boolean, index: not_analyzed, include_in_all: false }
        has_command_paper: { type: boolean, index: not_analyzed, include_in_all: false }
        has_act_paper: { type: boolean, index: not_analyzed, include_in_all: false }
