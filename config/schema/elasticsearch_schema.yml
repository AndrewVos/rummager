index:
  settings:
    analysis:
      analyzer:
        default:  # Indexing analyzer: doesn't use custom synonyms
          type: custom
          tokenizer: standard
          filter: [standard, lowercase, stop, stemmer_override, stemmer_english]
        query_default:
          type: custom
          tokenizer: standard
          filter: [standard, lowercase, synonym, stop, stemmer_override, stemmer_english]
        shingled_query_analyzer:
          type: custom
          tokenizer: standard
          filter: [standard, lowercase, stop, stemmer_override, stemmer_english, filter_shingle]
        exact_match:
          type: custom
          tokenizer: keyword
          filter: [trim, lowercase]
        best_bet_stemmed_match:
          type: custom
          tokenizer: standard
          filter: [standard, lowercase, stemmer_override, stemmer_english]
      filter:
        stemmer_english:
          type: stemmer
          name: english
        filter_shingle:
          type: shingle
          max_shingle_size: 2
          min_shingle_size: 2
mappings:

  page-traffic: &page-traffic
    page-traffic:
      _all: { enabled: false }
      dynamic_templates: [
        {
          "view_count": {
            match: "vc_*",
            mapping: { type: long, stored: true }
          }
        },
        {
          "view_fraction": {
            match: "vf_*",
            mapping: { type: float, stored: true }
          }
        },
        {
          "rank": {
            match: "rank_*",
            mapping: { type: float, stored: true }
          }
        }
      ]
      properties:
        path_components: { type: string, index: not_analyzed }
        rank_14: { type: float, stored: true }

  page-traffic-test: *page-traffic

  metasearch: &metasearch
    best_bet:
      _all: { enabled: false }
      properties:
        exact_query:   { type: string, index: analyzed, analyzer: "exact_match" }
        stemmed_query: { type: string, index: analyzed, analyzer: "best_bet_stemmed_match" }
        stemmed_query_as_term: { type: string, index: not_analyzed }
        details:       { type: string, index: not_analyzed }
  metasearch-test: *metasearch
